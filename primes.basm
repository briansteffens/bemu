start:
    # Count previous primes
    mov r5 1

    # Initial prime of 2
    mov [rmem] 2

    # Check
    mov r0 1

check_next:

    # Increment check, end if limit passed
    add r0 2
    cmp r0 10000
    jge end

    # Loop counter for previous_next
    mov r1 0

    # Divide check in half
    mov r3 r0
    div r3 2

    previous_next:
        # End previous loop if previous prime list exhausted
        cmp r1 r5
        jge found_one

        # This is a prime if a previous prime is greater than half this one
        cmp [r1*8+rmem] r3
        jg found_one

        # If check is evenly divisible by a previous prime it's not a prime
        mov r4 r0
        mod r4 [r1*8+rmem]
        cmp r4 0
        je check_next

        # Test next previous prime
        inc r1
        jmp previous_next

    found_one:
        # Add prime to found/previous list
        mov [r5*8+rmem] r0
        inc r5
        print r0

    jmp check_next

end:
    exit
